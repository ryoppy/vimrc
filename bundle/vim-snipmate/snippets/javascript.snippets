# Singleton
snippet sn_singleton
	/**
	 * ${2}
	 * Singleton Class.
	 * 
	 * @class ${1:class_name}
	 */
	var $1 = (function() {
		
		var _fromGetInstance = false;
		var _instance;
		
		function _construct() {
		    if (_fromGetInstance !== true) {
		        throw new Error("must use the getInstance.");
		    }
		    _fromGetInstance = false;
		}
		
		/**
	     * @method getInstance
	     * @return {Object}
	     */
	    _construct.getInstance = function() {
		    if (_instance) {
		        return _instance;
		    }
		    _fromGetInstance = true;
		    _instance = new this();
			_instance.init();
			return _instance
		}
		return _construct;
	})();
	
	$1.prototype = {
		
		/**
		 * This methoid is called once. 
		 * 
		 * @method init
		 */
		init : function() {
			${3}
		}
	}

	var ins = $1.getInstance();

# Debug
snippet d
	console.debug(${1});
# Comment
snippet comm
	/**
	 * ${1}
	 * 
	 */
# Self
snippet self
	var self = this;
# Ajax
snippet ajax
	$.ajax({
		type : "${1:GET}"
		url : "${2:/}",
		dataType : "${3:json}",
		success : function() {
			${4}
		}
	}};

# Prototype
snippet proto
	${1:class_name}.prototype.${2:method_name} =
	function(${3:first_argument}) {
		${4:// body...}
	};
# Function
snippet fun
	function ${1:function_name} (${2:argument}) {
		${3:// body...}
	}
# FunctionObject
snippet funco
	${1:name} : function(${2:argument}) {
		${3}
	},
# Anonymous Function
snippet f
	function() {
# if
snippet if
	if (${1:true}) {${2}}
# if ... else
snippet ife
	if (${1:true}) {${2}}
	else{${3}}
# tertiary conditional
snippet t
	${1:/* condition */} ? ${2:a} : ${3:b}
# switch
snippet switch
	switch(${1:expression}) {
		case '${3:case}':
			${4:// code}
			break;
		${5}
		default:
			${2:// code}
	}
# case
snippet case
	case '${1:case}':
		${2:// code}
		break;
	${3}
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# for (...) {...} (Improved Native For-Loop)
snippet forr
	for (var ${2:i} = ${1:Things}.length - 1; $2 >= 0; $2${3:--}) {
		${4:$1[$2]}
	};
# forin
snippet forin
	for (var key in ${1:value}) {
		$1[key]
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Object Method
snippet :f
	${1:method_name}: function(${2:attribute}) {
		${4}
	}${3:,}
# setTimeout function
snippet timeout
	setTimeout(function() {${3}}${2}, ${1:10};
# Get Elements
snippet get
	getElementsBy${1:TagName}('${2}')${3}
# Get Element
snippet gett
	getElementBy${1:Id}('${2}')${3}
