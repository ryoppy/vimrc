################# スニペット #################
# Singleton
snippet sn_singleton
	/**
	 * ${2}
	 * Singleton Class.
	 * 
	 * @class ${1:class_name}
	 */
	var $1 = (function() {
		
		var _fromGetInstance = false;
		var _instance;
		
		function _construct() {
		    if (_fromGetInstance !== true) {
		        throw new Error("must use the getInstance.");
		    }
		    _fromGetInstance = false;
		}
		
		/**
	     * @method getInstance
	     * @return {Object}
	     */
	    _construct.getInstance = function() {
		    if (_instance) {
		        return _instance;
		    }
		    _fromGetInstance = true;
		    _instance = new this();
			_instance.init();
			return _instance;
		}
		return _construct;
	})();
	
	$1.prototype = {
		
		/**
		 * This methoid is called once. 
		 * 
		 * @method init
		 */
		init: function() {
			${3}
		}
	}

	var ins = $1.getInstance();
# Ajax
snippet sn_ajax
	$.ajax({
		type: "${1:GET}"
		url: "${2:/}",
		dataType: "${3:json}",
		success: function(result) {
			${4}
		}
	}};
# setTimeout
snippet sn_imeout
	var timerIdd = setTimeout(function() {
		${3}
	}, ${1:1000});
# getElementById
snippet sn_elem
	var elem = document.getElementById("${1}");
################# ショートカットスニペット #################
# Comment
snippet comm
	/**
	 * ${2}
	 * 
	 * @method ${1}
	 */
# Debug
snippet d
	console.debug(${1});
# Self
snippet self
	var self = this;
# Function
snippet func
	/**
	 * ${3}
	 * 
	 * @method $1
	 */
	function ${1:name}(${2:argument}) {
		${3}
	}
# FunctionObject
snippet funco
	/**
	 * ${4}
	 * 
	 * @method $1
	 */
	${1:name}: function(${2:argument}) {
		${5}
	}${3:,}
# FunctionVar
snippet funcv
	/**
	 * ${3}
	 * 
	 * @method $1
	 */
	var ${1:name} = function(${2:argument}) {
		${4}
	}
# FunctionAnonymous 
snippet funca
	(function() {
		${1}
	})();
# if
snippet if
	if (${1}) {
		${2}
	}
# if ... else
snippet switch
	switch(${1:expression}) {
		case "${3:case}":
			${4}
			break;
		default:
			${2:// code}
	}
# case
snippet case
	case "${1:case}":
		${2}
		break;
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# forin
snippet forin
	for (var key in ${1:value}) {
		$1[key]
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
