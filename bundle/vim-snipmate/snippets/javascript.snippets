################# スニペット #################
# Singleton
snippet sn_singleton
	/**
	 * ${2}
	 * Singleton Class.
	 * 
	 * @class ${1:class_name}
	 */
	var $1 = (function() {
		
		var _fromGetInstance = false;
		var _instance;
		
		function _construct() {
		    if (_fromGetInstance !== true) {
		        throw new Error("must use the getInstance.");
		    }
		    _fromGetInstance = false;
		}
		
		/**
	     * @method getInstance
	     * @return {Object}
	     */
	    _construct.getInstance = function() {
		    if (_instance) {
		        return _instance;
		    }
		    _fromGetInstance = true;
		    _instance = new this();
			_instance.init();
			return _instance;
		}
		return _construct;
	})();
	
	$1.prototype = {
		
		/**
		 * This methoid is called once. 
		 * 
		 * @method init
		 */
		init: function() {
			${3}
		}
	}

	var ins = $1.getInstance();
# setTimeout
snippet sn_imeout
	var timerId = setTimeout(function() {
		${3}
	}, ${1:1000});
# getElementById
snippet sn_elem
	var elem = document.getElementById("${1}");
# typeof
snippet sn_typeof
	if (typeof ${1:name} === "undefined") {
		var $1 = {};
	}
# class
snippet sn_skeleton
	/**
	 * @namespace $1
	 */
	if (typeof $1 === "undefined") {
		var ${1:namespace} = function() {};
	}
	
	/**
	 * ${2}
	 * 
	 * @class $1.${2:class}
	 */
	$1.$2 = function() {
		this.init();
	}
	
	$1.$2.prototype = {
		/**
		 * Initialize
		 * 
		 * @constructor
		 * @method init
		 */
		init: function() {
			${3}
		}
	}
# extend
snippet sn_extend
	/**
	 * Extend object.
	 * 
	 * @method extend
	 * @param  {Object}  destination
	 * @param  {Object}  source
	 * @param  {Boolean} overwrite
	 * @return {Object}
	 */
	${1:class}.extend = function(d, s, o) {
		if (!d || !s) return d;
		for (var field in s) {
			if (d[field] === s[field]) continue;
			if (o === false && d.hasOwnProperty(field)) continue;
			d[field] = s[field];
		}
		return d;
	}
################# ショートカットスニペット #################
# ClickEvent
snippet click
	click(function() {
		${1}
	});
# EachRoop
snippet each
	each(function() {
		${1}
	});
# Elem
snippet e
	var $elem = $("#${1}");
# Ajax
snippet ajax
	$.ajax({
		type: "${1:GET}"
		url: "${2:/}",
		dataType: "${3:json}",
		success: function(result) {
			${4}
		}
	}};
# Animation
snippet anim
	$("#${1}").animate({
		opacity: 0,
	}, 2000, function() {
		// complete
		${2}
	});
################# ショートカットスニペット #################
# Comment
snippet comm
	/**
	 * ${2}
	 * 
	 * @method ${1}
	 */
# Debug
snippet d
	console.debug(${1});
# function
snippet f
	function(${1}) {
# Self
snippet self
	var self = this;
# Function
snippet func
	/**
	 * ${3}
	 * 
	 * @method $1
	 */
	function ${1:name}(${2:argument}) {
		${3}
	}
# FunctionObject
snippet funco
	/**
	 * ${4}
	 * 
	 * @method $1
	 */
	${1:name}: function(${2:argument}) {
		${5}
	}${3:,}
# FunctionVar
snippet funcv
	/**
	 * ${3}
	 * 
	 * @method $1
	 */
	var ${1:name} = function(${2:argument}) {
		${4}
	}
# FunctionAnonymous 
snippet funca
	(function() {
		${1}
	})();
# if
snippet if
	if (${1}) {
		${2}
	}
# if ... else
snippet switch
	switch(${1:expression}) {
		case "${3:case}":
			${4}
			break;
		default:
			${2:// code}
	}
# case
snippet case
	case "${1:case}":
		${2}
		break;
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# forin
snippet forin
	for (var key in ${1:value}) {
		$1[key]
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
