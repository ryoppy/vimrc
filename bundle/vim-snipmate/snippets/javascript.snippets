################# スニペット #################
# Singleton
snippet sn_singleton
	/**
	 * ${3}
	 * Singleton Class.
	 * 
	 * @namespace ${1:namespace}
	 * @class ${2:class_name}
	 */
	$1.$2 = (function() {
		
		var _f = false, _ins;
		
		function _c() {
		    if (_f !== true) throw "must use the getInstance.";
		    _f = false;
		}
		
		/**
	     * @method getInstance
	     * @return {Object}
	     */
	    _c.getInstance = function() {
		    if (_ins) return _ins;
		    _f = true;
		    _ins = new this();
			_ins.init();
			return _ins;
		};
		return _c;
	})();
	
	$1.$2.prototype = {
		
		/**
		 * This methoid is called once. 
		 * 
		 * @method init
		 * @cor
		 */
		init: function() {
			${4}
		}
	};

	var ins = $1.$2.getInstance();
# setInterval
snippet sn_interval
	var timerId = setInterval(function() {
		${2}
	}, ${1:1000});
# setTimeout
snippet sn_timeout
	setTimeout(function() {
		${2}
	}, ${1:1000});
# getElementById
snippet sn_elem
	var elem = document.getElementById("${1}");
# typeof
snippet sn_typeof
	if (typeof ${1:name} === "undefined") {
		var $1 = {};
	}
# checked
snippet sn_checked
	var $thisp = $(this);
	if ($thisp.attr('checked')) {
		// checked
	} else {
		// unchecked
	}
# skeleton
snippet sn_skeleton
	var ${1:class} = function() {
		this.initialize.apply(this, arguments);
	};

	$1.prototype = {

		/**
		 * Constructor
		 */
		initialize : function()
		{
			this.$sample = $('#sample');
			this.bind();
		},

		/**
		 * 各種イベント付与
		 */
		bind : function()
		{
			var self = this;

			// サンプルのクリックイベント
			this.$sample.click(function(e) {
				self.sample.apply(self, arguments);
				return false;
			});
		},

		/**
		 * 
		 */
		sample : function(e)
		{
		}
	};

	$(function() {
		var instance = new $1();
	});
# extend
snippet sn_extend
	/**
	 * Extend object.
	 * 
	 * @method extend
	 * @param  {Object}  destination
	 * @param  {Object}  source
	 * @param  {Boolean} overwrite
	 * @return {Object}
	 */
	${1:class}.extend = function(d, s, o) {
		if (!d || !s) return d;
		for (var field in s) {
			if (d[field] === s[field]) continue;
			if (o === false && d.hasOwnProperty(field)) continue;
			d[field] = s[field];
		}
		return d;
	};
# sn_ready
snippet sn_ready
	$(function() {
		// onReady
		${1}
	});
# sn_ajax
snippet sn_ajax
	$.ajax({
		type     : "${1:GET}",
		url      : "${2:/}",
		dataType : "${3:json}",
		success  : function(result) {
			${4}
		}
	});
# sn_debug
snippet sn_debug
	/**
	 * IEエラー回避
	 * IEだとconsole系の関数が使えないので空の関数を準備する。
	 */
	if (typeof console === "undefined") {
		var console = {};
		console.debug = function() {};
		console.log = function() {};
	}
################# jQueryショートカットスニペット #################
# ClickEvent
snippet click
	click(function() {
		${1}
	});
# EachRoop
snippet each
	each(function() {
		${1}
	});
# Elem
snippet e
	var $elem = $("#${1}");
# Animation
snippet anim
	$("#${1}").animate({
		opacity: 0,
	}, 2000, function() {
		// complete
		${2}
	});
# $
snippet $
	$("${1}")${2};
################# JSLintショートカットスニペット #################
# sn_jsl_comm
snippet sn_jsl_comm
	/*global ${1:name}: true*/${2}
################# ショートカットスニペット #################
# Comment
snippet comm
	/**
	 * ${2}
	 * 
	 * @method ${1}
	 */
# Debug
snippet d
	console.debug(${1});
# function
snippet f
	function(${1}) {
		${2}
	}${3}
# Self
snippet self
	var self = this;
# thsip
snippet $thisp
	var $thisp = $(this);
# Function
snippet sn_func
	/**
	 * ${3}
	 * 
	 * @method $1
	 */
	function ${1:name}(${2:argument}) {
		${3}
	}
# Function Closer
snippet sn_func_colosure
	/**
	 * ${3}
	 * 
	 * @method $1
	 */
	var ${1:name} = (function() {
		var self = this;
		return function(${2:argument}) {
			${4}
		};
	})();
# FunctionObject
snippet sn_func_obj
	/**
	 * ${4}
	 * 
	 * @method $1
	 */
	${1:name}: function(${2:argument}) {
		${5}
	}${3:,}
# FunctionVar
snippet sn_func_var
	/**
	 * ${3}
	 * 
	 * @method $1
	 */
	var ${1:name} = function(${2:argument}) {
		${4}
	};
# FunctionAnonymous 
snippet sn_func_anonymous
	(function() {
		${1}
	})();
# if
snippet if
	if (${1}) {
		${2}
	}
# if ... else
snippet switch
	switch(${1:expression}) {
		case "${3:case}":
			${4}
			break;
		default:
			${2:// code}
	}
# case
snippet case
	case "${1:case}":
		${2}
		break;
# for (...) {...}
snippet for
	for (var ${2:i} = 0; $2 < ${1:Things}.length; $2${3:++}) {
		${4:$1[$2]}
	};
# forin
snippet forin
	for (var key in ${1:value}) {
		$1[key]
	}
# while (...) {...}
snippet wh
	while (${1:/* condition */}) {
		${2:/* code */}
	}
# do...while
snippet do
	do {
		${2:/* code */}
	} while (${1:/* condition */});
# Singleton-Full
snippet sn_singleton_full
	/**
	 * ${3}
	 * Singleton Class.
	 * 
	 * @namespace ${1:namespace}
	 * @class ${2:class_name}
	 */
	$1.$2 = (function() {
		
		var _fromGetInstance = false;
		var _instance;
		
		function _construct() {
		    if (_fromGetInstance !== true) {
		        throw new Error("must use the getInstance.");
		    }
		    _fromGetInstance = false;
		}
		
		/**
	     * @method getInstance
	     * @return {Object}
	     */
	    _construct.getInstance = function() {
		    if (_instance) {
		        return _instance;
		    }
		    _fromGetInstance = true;
		    _instance = new this();
			_instance.init();
			return _instance;
		}
		return _construct;
	})();
	
	$1.prototype = {
		
		/**
		 * This methoid is called once. 
		 * 
		 * @method init
		 * @constructor
		 */
		init: function() {
			${4}
		}
	}

	var ins = $1.getInstance();
